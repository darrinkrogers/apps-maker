package ${basePackageName}.controller;

import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import ${basePackageName}.model.domain.${capitalizedEntityName};
import ${basePackageName}.repository.${capitalizedEntityName}Repository;

@CrossOrigin(origins="*")
@RestController
public class ${capitalizedEntityName}Controller {
	
	private Logger logger = LoggerFactory.getLogger(${capitalizedEntityName}Controller.class);
	
	@Autowired
	private ${capitalizedEntityName}Repository ${lowerCamelCasedEntityName}Repository;
	
	@GetMapping("/${lowerCasedEntityName}s")
	public List<${capitalizedEntityName}> get${capitalizedEntityName}s(){
		logger.info("Retrieving all ${capitalizedEntityName} objects from repository ...");

		return (List<${capitalizedEntityName}>)${lowerCamelCasedEntityName}Repository.findAll();
	}
	
	@GetMapping("/${lowerCasedEntityName}/{id}")
	public ${capitalizedEntityName} get${capitalizedEntityName}(@PathVariable("id") ${pkDataType} id, HttpServletResponse response) {
		
		logger.info("Retrieving ${capitalizedEntityName} from repository ...");
		Optional<${capitalizedEntityName}> ${lowerCamelCasedEntityName}Optional = ${lowerCamelCasedEntityName}Repository.findById(id);
		${capitalizedEntityName} ${lowerCamelCasedEntityName} = null;
		if(!${lowerCamelCasedEntityName}Optional.isPresent()) {
			response.setStatus(404);
		}else {
			${lowerCamelCasedEntityName} = ${lowerCamelCasedEntityName}Optional.get();
		}
		
		return ${lowerCamelCasedEntityName};
	}
	
	@PostMapping("/${lowerCasedEntityName}")
	public void save${capitalizedEntityName}(@RequestBody ${capitalizedEntityName} ${lowerCamelCasedEntityName}) {
		logger.info("Saving ${capitalizedEntityName} object to repository ...");
		${lowerCamelCasedEntityName}Repository.save(${lowerCamelCasedEntityName});
	}
	
	@DeleteMapping(value = "/${lowerCasedEntityName}/{id}")
	public ResponseEntity<${pkDataType}> delete${capitalizedEntityName}(@PathVariable ${pkDataType} id) {
		logger.info("Deleting ${capitalizedEntityName} object from repository ...");
		${lowerCamelCasedEntityName}Repository.deleteById(id);
				
		return new ResponseEntity<>(id, HttpStatus.OK);
	}	
}

